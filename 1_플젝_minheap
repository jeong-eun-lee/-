
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#define MAX_ELEMENT 200
#include <time.h>

///////////
//힙 정의//
typedef struct {
    int heap[MAX_ELEMENT];
    int heap_size;
}HeapType;

////////////////////
/////힙 생성 함수///
init(HeapType *h) {
    h->heap_size=0;
}

//////////////////////////////
////output 파일을 만든다 /////
void output() {

   FILE* fp;
   fp = fopen("output.txt", "w");//output.txt를 쓰기전용으로 열기

   if (fp == NULL)
      perror("File Open Error\n");

   fclose(fp);// 파일 닫기
}

///////////////////////////////////////////////
//////재귀의 형식으로 배열을 힙정렬로 바꾼다.//
int recur_minheap(HeapType *h, int index) {

    int l= 2*index;
    int r = 2*index+1;
    int small = index; ////부모 노드의 값이 가장 작다고 설정
    if ((l <= h->heap_size) && (h->heap[l] < h->heap[index]))
        small = l;    //왼쪽노드가 작은 경우 small을 왼쪽노드로 바꿈
    else
        small = index;

    if ((r <= h->heap_size)&& (h->heap[r] < h->heap[small]))
        small = r;  //오른노드가 작은 경우 small을 오른쪽 노드로 바꿈
    else
        small= index;

    if(small !=index) {

        int tmp= h->heap[index];             ////small이 index가 아닐 경우, 더 정렬이 필요한 것이다.
        h->heap[index]=h->heap[small];       //// index와 small의 데이터를 swap한 후, 재귀로 반복해서 수행하도록 한다.
        h->heap[small]=tmp;

        recur_minheap(h->heap, small);}
}


///////////////////////////////////////////////
//////반복의 형식으로 배열을 힙정렬로 바꾼다.//
int iter_minheap(HeapType *h) {
int i;
int N=h->heap_size;
	for (i = 1; i < N; i++)	{
		int c = i;
		do
		{
			int root = (c - 1) / 2;
			if (h->heap[root] < h->heap[c])
			{
				int tmp = h->heap[root];
				h->heap[root] = h->heap[c];
				h->heap[c] = tmp;
			}
			c = root;
		} while (c != 0);}

	//크기를 줄여가며 반복적으로 힙을 구성한다.
	for (i = N - 1; i >= 0; i--)
	{
		//루트 노드와 트리의 마지막 노드를 교환한다.
		int tmp = h->heap[0];
		h->heap[0] = h->heap[i];
		h->heap[i] = tmp;

		//새롭게 Heap 구조를 구성
		int root = 0;
		int c = 1;

		do{
			c = 2 * root + 1;
			//자식 노드 비교
			if (h->heap[c] < h->heap[c + 1] && c < i - 1)
			{
				c++;
			}
			//루트와 자식 노드랑 교환
			if (h->heap[root] < h->heap[c] && c < i)
			{
				int tmp = h->heap[root];
				h->heap[root] = h->heap[c];
				h->heap[c] = tmp;
			}
			root = c;
		} while (c < i);
	}
	return 0;    }

////////////////////////////////////////
/////힙을 levelorder로 출력하는 함수//
void levelorder(HeapType *h, char tmp, int data) {

   FILE* fp;
   fp = fopen("output.txt", "a");//output.txt를 수정전용으로 열기

   //////////////에러  처리 /////////////////
   if (fp == NULL)
      perror("File Open Error\n");

    if(tmp=='i') {                             ////삽입함수인 경우
    fprintf(fp, "%c%d : ", tmp, data); }      //// 삽입하고자 하는 수를 data로 출력

    if(tmp=='d') {                              ////삭제함수인 경우
        fprintf(fp, "%c: %d/ ", tmp, data);}    ////삭제한 수를 data로 출력


    for (int i = 1; i <= h->heap_size; i++) {   ////배열을 1부터 순서대로출력한다
        fprintf(fp, "%d, ", h->heap[i]);        ////배열 순서와 levelorder 가 같으므로
    }

////////////////////////////
/////힙의 높이를 구한다/////
    int a=h->heap_size;
    int height=0;
    while(a>=1) {
        a=a/2;
        height++;
    }

    int i=h->heap_size;


////힙의 높이를 바탕으로, 마지막 floor에 비어있는 노드에
////0을 출력하도록 한다////////////////////////////////

    for(i; i<= pow(2, height)-2; i++)
        fprintf(fp, "0, ", h->heap[i]);

   fprintf(fp, "\n");
   fclose(fp);//fp 파일 닫기

}

///////////////////////////////////////
////////반복으로 힙 삽입하는 함수//////
void insertion(HeapType *h, int item) {

    int i;
    i=++(h->heap_size);


    while ((i!=1)&& (item<h->heap[i/2])) {
        h->heap[i]= h->heap[i/2];
        i/=2;
    }

    h->heap[i]=item;
   }

///////////////////////////////////////
////////재귀로 힙 삽입하는 함수//////
void recur_insertion(HeapType *h, int item) {

    h->heap_size++;
    h->heap[h->heap_size]=item;

    recur_minheap(&h,1);
   }

///////////////////////////////////////
////////반복로 힙 삭제하는 함수//////
int deletion(HeapType *h) {
int parent,child;
int item, temp;

item=h->heap[1];
temp=h->heap[(h->heap_size)--];
parent=1;
child=2;

while ( child<= h->heap_size) {
    if( (child<h->heap_size) && (h->heap[child] > h->heap[child+1]) )
        child++;


    if( temp<=h->heap[child])
        break;


    h->heap[parent]=h->heap[child];
    parent=child;
    child *=2;
}
h->heap[parent]=temp;
return item;
}

///////////////////////////////////////
////////재귀로 힙 삭제하는 함수//////
int recur_deletion(HeapType *h) {
    int key=h->heap[1];

    h->heap[1]= h->heap[h->heap_size];

    h->heap_size--;
    recur_minheap(&h,1);

    return key;
}


int main(){

HeapType h;         /////////////////////////////
init(&h);           //히프 구조를 선언 후 생성///
output();           //output.txt.를 만든다///////


    FILE* ffile;
    ffile = fopen("input.txt", "r");//input.txt를 읽기모드로 열기

    char s[MAX_ELEMENT];
    int i=0;
    h.heap[i]=0;
    i=1;

    fgets(s, MAX_ELEMENT, ffile);  // 최대 MAX_ELEMENT의 문자열 한줄 읽기
    char* tok = strtok(s, " ,\n");//숫자 한개 읽어오기

    while (tok)
    {
    h.heap[i] = atoi(tok);  //읽어온 문자열을 숫자로 변경후 힙 배열에 저장
    tok = strtok(NULL, " ,\n");//다음 숫자 읽어오기
    i++;
    h.heap_size++;
    }


    recur_minheap(&h,1);
    iter_minheap(&h);


/////////////////////////////////
////input.txt의 명령을 하나씩 실행
//////조건: feof가 0일때, 즉 파일이 끝이 아닐 경우 반복
    while(feof(ffile)==0) {
        int data;
        char tmp;

  fscanf(ffile, "%c%d", &tmp, &data);

    //insertion
    if (tmp == 'i') {

         insertion(&h, data);            // 히프에 data를 삽입한다.
         //recur_insertion(&h, data);
         levelorder(&h, tmp, data); }    // 함수로 output.txt를 level 순서에 맞게 정렬하고 이를 읽는다.

    ////deletion
    else if (tmp=='d') {
        if( h.heap_size==1)              // 히프 사이즈가 1인 경우, 삭제할 것이 없다고 출력
            fprintf(ffile, "d: NOT EXIST ");

        else {
        data=deletion(&h);              // 히프의 첫번째 데이터를 삭제한다. data= 삭제된 데이터값
        //data=recur_deletion(&h);
        levelorder(&h,tmp,data);        // 함수로 output.txt를 level 순서에 맞게 정렬하고 이를 읽는다.
        }}
}
   //파일 닫기
   fclose(ffile);
}
